name: 'ppv-app'
services:
  api-server:
    build:
      context: ./api-server
      dockerfile: Dockerfile
      target: dev # a stage no Dockerfile. Para prod, usar 'prod'
    ports:
      - '8080:8080'
    volumes:
      - ./api-server:/server
    env_file:
      - .env
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ppv-app
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - pgdata:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ppv-app

  web-app:
    build:
      context: ./web-app
      dockerfile: Dockerfile
      target: dev # a stage no Dockerfile. Para prod, usar 'prod'
    ports:
      - '3000:3000'
    volumes:
      - ./web-app:/app
    env_file:
      - .env
    environment:
      - NEXT_PUBLIC_API_URL=http://api-server:8080
    depends_on:
      - api-server
    networks:
      - ppv-app

volumes:
  pgdata:

networks:
  ppv-app:
    driver: bridge
  
